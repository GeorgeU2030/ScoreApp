// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ScoreAppContext))]
    [Migration("20240220130817_First")]
    partial class First
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverId"));

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Logoteam")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Racingteam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Titles")
                        .HasColumnType("int");

                    b.HasKey("DriverId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("backend.Models.DriverSeason", b =>
                {
                    b.Property<int>("DriverSeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverSeasonId"));

                    b.Property<string>("Logoteam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int?>("Seasonpoints")
                        .HasColumnType("int");

                    b.Property<int?>("Seasonwins")
                        .HasColumnType("int");

                    b.HasKey("DriverSeasonId");

                    b.HasIndex("SeasonId");

                    b.ToTable("DriversSeason");
                });

            modelBuilder.Entity("backend.Models.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchId"));

                    b.Property<int?>("PenaltyTeamone")
                        .HasColumnType("int");

                    b.Property<int?>("PenaltyTeamtwo")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("TeamSoccerIdone")
                        .HasColumnType("int");

                    b.Property<int>("TeamSoccerIdtwo")
                        .HasColumnType("int");

                    b.Property<int?>("TeamoneGoals")
                        .HasColumnType("int");

                    b.Property<int?>("TeamtwoGoals")
                        .HasColumnType("int");

                    b.HasKey("MatchId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamSoccerIdone");

                    b.HasIndex("TeamSoccerIdtwo");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("backend.Models.MatchPlayer", b =>
                {
                    b.Property<int>("MatchPlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchPlayerId"));

                    b.Property<int>("PlayerSeasonId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerSeasonIdtwo")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int?>("Setone")
                        .HasColumnType("int");

                    b.Property<int?>("Settwo")
                        .HasColumnType("int");

                    b.HasKey("MatchPlayerId");

                    b.HasIndex("PlayerSeasonId");

                    b.HasIndex("PlayerSeasonIdtwo");

                    b.HasIndex("SeasonId");

                    b.ToTable("MatchesPlayer");
                });

            modelBuilder.Entity("backend.Models.MatchSport", b =>
                {
                    b.Property<int>("MatchSportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchSportId"));

                    b.Property<int?>("PointsTeamone")
                        .HasColumnType("int");

                    b.Property<int?>("PointsTeamtwo")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("TeamSportIdone")
                        .HasColumnType("int");

                    b.Property<int>("TeamSportIdtwo")
                        .HasColumnType("int");

                    b.HasKey("MatchSportId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamSportIdone");

                    b.HasIndex("TeamSportIdtwo");

                    b.ToTable("MatchesSport");
                });

            modelBuilder.Entity("backend.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerId"));

                    b.Property<int?>("Australiaopen")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rolandgarros")
                        .HasColumnType("int");

                    b.Property<int?>("Usopen")
                        .HasColumnType("int");

                    b.Property<int?>("Wimbledon")
                        .HasColumnType("int");

                    b.HasKey("PlayerId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("backend.Models.PlayerSeason", b =>
                {
                    b.Property<int>("PlayerSeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerSeasonId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.HasKey("PlayerSeasonId");

                    b.HasIndex("SeasonId");

                    b.ToTable("PlayersSeason");
                });

            modelBuilder.Entity("backend.Models.Race", b =>
                {
                    b.Property<int>("RaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RaceId"));

                    b.Property<int>("EighthId")
                        .HasColumnType("int");

                    b.Property<int>("FifthId")
                        .HasColumnType("int");

                    b.Property<string>("Flagrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FourthId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NinthId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("SecondId")
                        .HasColumnType("int");

                    b.Property<int>("SeventhId")
                        .HasColumnType("int");

                    b.Property<int>("SixthId")
                        .HasColumnType("int");

                    b.Property<int>("TenthId")
                        .HasColumnType("int");

                    b.Property<int>("ThirdId")
                        .HasColumnType("int");

                    b.Property<int>("WinnerId")
                        .HasColumnType("int");

                    b.HasKey("RaceId");

                    b.HasIndex("EighthId");

                    b.HasIndex("FifthId");

                    b.HasIndex("FourthId");

                    b.HasIndex("NinthId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SecondId");

                    b.HasIndex("SeventhId");

                    b.HasIndex("SixthId");

                    b.HasIndex("TenthId");

                    b.HasIndex("ThirdId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("backend.Models.Season", b =>
                {
                    b.Property<int>("SeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeasonId"));

                    b.Property<int?>("ChampionId")
                        .HasColumnType("int");

                    b.Property<int>("Edition")
                        .HasColumnType("int");

                    b.Property<int?>("SubChampionId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("SeasonId");

                    b.HasIndex("ChampionId");

                    b.HasIndex("SubChampionId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("backend.Models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Division")
                        .HasColumnType("int");

                    b.Property<string>("Flag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("backend.Models.TeamSoccer", b =>
                {
                    b.Property<int>("TeamSoccerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamSoccerId"));

                    b.Property<int?>("Diff")
                        .HasColumnType("int");

                    b.Property<int?>("Draw")
                        .HasColumnType("int");

                    b.Property<int?>("Gc")
                        .HasColumnType("int");

                    b.Property<int?>("Gf")
                        .HasColumnType("int");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Lose")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Phase")
                        .HasColumnType("int");

                    b.Property<int?>("Points")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int?>("Win")
                        .HasColumnType("int");

                    b.HasKey("TeamSoccerId");

                    b.HasIndex("SeasonId");

                    b.ToTable("TeamsSoccer");
                });

            modelBuilder.Entity("backend.Models.TeamSport", b =>
                {
                    b.Property<int>("TeamSportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamSportId"));

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Lost")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Percentage")
                        .HasColumnType("real");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int?>("Win")
                        .HasColumnType("int");

                    b.HasKey("TeamSportId");

                    b.HasIndex("SeasonId");

                    b.ToTable("TeamsSport");
                });

            modelBuilder.Entity("backend.Models.Tournament", b =>
                {
                    b.Property<int>("TournamentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TournamentId"));

                    b.Property<string>("Flag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TournamentId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("backend.Models.Trophy", b =>
                {
                    b.Property<int>("TrophyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrophyId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("TrophyId");

                    b.HasIndex("TeamId");

                    b.ToTable("Trophies");
                });

            modelBuilder.Entity("backend.Models.Winrace", b =>
                {
                    b.Property<int>("WinraceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WinraceId"));

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WinraceId");

                    b.HasIndex("DriverId");

                    b.ToTable("Winraces");
                });

            modelBuilder.Entity("backend.Models.DriverSeason", b =>
                {
                    b.HasOne("backend.Models.Season", "Season")
                        .WithMany("DriversSeason")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("backend.Models.Match", b =>
                {
                    b.HasOne("backend.Models.Season", "Season")
                        .WithMany("Matches")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.TeamSoccer", "Teamone")
                        .WithMany()
                        .HasForeignKey("TeamSoccerIdone")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("backend.Models.TeamSoccer", "Teamtwo")
                        .WithMany()
                        .HasForeignKey("TeamSoccerIdtwo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("Teamone");

                    b.Navigation("Teamtwo");
                });

            modelBuilder.Entity("backend.Models.MatchPlayer", b =>
                {
                    b.HasOne("backend.Models.PlayerSeason", "Playerone")
                        .WithMany()
                        .HasForeignKey("PlayerSeasonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("backend.Models.PlayerSeason", "Playertwo")
                        .WithMany()
                        .HasForeignKey("PlayerSeasonIdtwo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("backend.Models.Season", "Season")
                        .WithMany("MatchesPlayer")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playerone");

                    b.Navigation("Playertwo");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("backend.Models.MatchSport", b =>
                {
                    b.HasOne("backend.Models.Season", "Season")
                        .WithMany("MatchesSport")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.TeamSport", "Teamone")
                        .WithMany()
                        .HasForeignKey("TeamSportIdone")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("backend.Models.TeamSport", "Teamtwo")
                        .WithMany()
                        .HasForeignKey("TeamSportIdtwo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("Teamone");

                    b.Navigation("Teamtwo");
                });

            modelBuilder.Entity("backend.Models.PlayerSeason", b =>
                {
                    b.HasOne("backend.Models.Season", "Season")
                        .WithMany("PlayersSeason")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("backend.Models.Race", b =>
                {
                    b.HasOne("backend.Models.DriverSeason", "Eighth")
                        .WithMany()
                        .HasForeignKey("EighthId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("backend.Models.DriverSeason", "Fifth")
                        .WithMany()
                        .HasForeignKey("FifthId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("backend.Models.DriverSeason", "Fourth")
                        .WithMany()
                        .HasForeignKey("FourthId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("backend.Models.DriverSeason", "Ninth")
                        .WithMany()
                        .HasForeignKey("NinthId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("backend.Models.Season", "Season")
                        .WithMany("Races")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.DriverSeason", "Second")
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("backend.Models.DriverSeason", "Seventh")
                        .WithMany()
                        .HasForeignKey("SeventhId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("backend.Models.DriverSeason", "Sixth")
                        .WithMany()
                        .HasForeignKey("SixthId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("backend.Models.DriverSeason", "Tenth")
                        .WithMany()
                        .HasForeignKey("TenthId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("backend.Models.DriverSeason", "Third")
                        .WithMany()
                        .HasForeignKey("ThirdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("backend.Models.DriverSeason", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Eighth");

                    b.Navigation("Fifth");

                    b.Navigation("Fourth");

                    b.Navigation("Ninth");

                    b.Navigation("Season");

                    b.Navigation("Second");

                    b.Navigation("Seventh");

                    b.Navigation("Sixth");

                    b.Navigation("Tenth");

                    b.Navigation("Third");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("backend.Models.Season", b =>
                {
                    b.HasOne("backend.Models.Team", "Champion")
                        .WithMany()
                        .HasForeignKey("ChampionId");

                    b.HasOne("backend.Models.Team", "SubChampion")
                        .WithMany()
                        .HasForeignKey("SubChampionId");

                    b.HasOne("backend.Models.Tournament", "Tournament")
                        .WithMany("Seasons")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Champion");

                    b.Navigation("SubChampion");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("backend.Models.TeamSoccer", b =>
                {
                    b.HasOne("backend.Models.Season", "Season")
                        .WithMany("TeamsSoccer")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("backend.Models.TeamSport", b =>
                {
                    b.HasOne("backend.Models.Season", "Season")
                        .WithMany("TeamsSport")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("backend.Models.Trophy", b =>
                {
                    b.HasOne("backend.Models.Team", "Team")
                        .WithMany("Trophies")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("backend.Models.Winrace", b =>
                {
                    b.HasOne("backend.Models.Driver", "Driver")
                        .WithMany("Winraces")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("backend.Models.Driver", b =>
                {
                    b.Navigation("Winraces");
                });

            modelBuilder.Entity("backend.Models.Season", b =>
                {
                    b.Navigation("DriversSeason");

                    b.Navigation("Matches");

                    b.Navigation("MatchesPlayer");

                    b.Navigation("MatchesSport");

                    b.Navigation("PlayersSeason");

                    b.Navigation("Races");

                    b.Navigation("TeamsSoccer");

                    b.Navigation("TeamsSport");
                });

            modelBuilder.Entity("backend.Models.Team", b =>
                {
                    b.Navigation("Trophies");
                });

            modelBuilder.Entity("backend.Models.Tournament", b =>
                {
                    b.Navigation("Seasons");
                });
#pragma warning restore 612, 618
        }
    }
}
